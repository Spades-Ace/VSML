import React from 'react';
import './VulnerabilitySelector.css';

interface VulnerabilitySelectorProps {
  currentVulnerability: string;
  onVulnerabilityChange: (vulnerability: string) => void;
}

const VulnerabilitySelector: React.FC<VulnerabilitySelectorProps> = ({
  currentVulnerability,
  onVulnerabilityChange,
}) => {
  return (
    <div className="vulnerability-selector">
      <h3>Select Vulnerability Mode</h3>
      <div className="selector-buttons">
        <button
          className={currentVulnerability === 'none' ? 'active' : ''}
          onClick={() => onVulnerabilityChange('none')}
        >
          Secure Mode
        </button>
        <button
          className={currentVulnerability === 'fixation' ? 'active' : ''}
          onClick={() => onVulnerabilityChange('fixation')}
        >
          Session Fixation
        </button>
        <button
          className={currentVulnerability === 'hijacking' ? 'active' : ''}
          onClick={() => onVulnerabilityChange('hijacking')}
        >
          Session Hijacking
        </button>
        <button
          className={currentVulnerability === 'timeout' ? 'active' : ''}
          onClick={() => onVulnerabilityChange('timeout')}
        >
          Long Session Timeout
        </button>
      </div>

      <div className="vulnerability-details">
        <h4>Current Mode: {currentVulnerability === 'none' ? 'Secure' : currentVulnerability}</h4>
        
        {currentVulnerability === 'none' && (
          <p>
            Secure Mode: Sessions are properly managed with appropriate timeout settings,
            regeneration of session IDs upon login, and proper destruction on logout.
          </p>
        )}
        
        {currentVulnerability === 'fixation' && (
          <div>
            <p>
              <strong>Session Fixation Vulnerability:</strong> The application accepts pre-set session IDs and doesn't
              regenerate them upon authentication.
            </p>
            <p>
              <strong>Attack Vector:</strong> An attacker provides a victim with a link containing a known session ID.
              After the victim logs in, the attacker can use the same session ID to access the victim's account.
            </p>
          </div>
        )}
        
        {currentVulnerability === 'hijacking' && (
          <div>
            <p>
              <strong>Session Hijacking Vulnerability:</strong> The application doesn't properly invalidate sessions
              during logout.
            </p>
            <p>
              <strong>Attack Vector:</strong> After a user logs out, their session remains active. An attacker who obtains
              the session ID can continue using the session as if the user were still authenticated.
            </p>
          </div>
        )}
        
        {currentVulnerability === 'timeout' && (
          <div>
            <p>
              <strong>Excessive Session Timeout Vulnerability:</strong> The session timeout is set to 30 days,
              which is far too long for a secure application.
            </p>
            <p>
              <strong>Attack Vector:</strong> If a session ID is leaked or stolen, an attacker has a very long window
              of opportunity to use it, even if the legitimate user is no longer active.
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default VulnerabilitySelector;